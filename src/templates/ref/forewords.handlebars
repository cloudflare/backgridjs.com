{{#extend "layout"}}
  {{#content "title"}}Core{{/content}}
  {{#content "content"}}
    <div class="row">
      <div class="col-md-10 col-md-offset-1">
        <div class="page-header">
          <h1>
            <a id="backgrid-core" href="#backgrid-core" title="Backgrid Core" class="section">Backgrid Core</a>
          </h1>
        </div>
        <p>Backgrid aims to be a highly modular and flexible library that aims
          to provide you with a set of basic building blocks for creating all
          kinds of data grids.</p>
        <h2>
          <a id="architecture" href="#architecture" title="Architecture" class="section">Architecture</a>
        </h2>
        <p>Backgrid is primarily comprised of a set of highly reusable <a
          href="http://backbonejs.org/#View"
          title="Backbone.View">Backbone.View</a> subclasses and a number of
          internal <a href="/ref/column.html" title="Column">models</a> and <a
          href="/ref/formatter.html" title="Formatter">helper classes</a>. In
          practical terms, this architecture ensures that if you are already
          familiar with Backbone, you can carry that knowledge over and apply to
          Backgrid directly.</p>
        <h3>
          <a id="laying-out-components" href="#laying-out-components" title="Laying out Components" class="section">Laying out Components</a>
        </h3>
        <p>Backgrid's View components are, borrowing from <a
          href="http://marionettejs.com/" title="Marionette">Marionette</a>'s
          parlance, primarily <em>CollectionView</em> and <em>ItemView</em>
          components, which means the components are to be laid out
          sequentially. However, the Grid's root element itself can be inserted
          to any where in the DOM.</p>
        <aside class="note">
          <h5>Note:</h5>
          <p>You can use Backgrid with or without Marionette, Backgrid does
            not depend on Marionette at all.</p>
        </aside>
        <h3>
          <a id="event-handling" href="#event-handling" title="Event Handling" class="section">Event Handling</a>
        </h3>
        <p>Another notable architectural choice Backgrid has made involves how
          it handles events. Backgrid takes advantage of the fact that every
          Backbone class implements the Backbone.Events interface. Internally,
          every Backgrid object shares one or more of Columns, Column,
          Collection and Model, Backgrid simply treats them as "event buses" to
          enable cross-component communication without requiring every Backgrid
          component to know of the existence and implementation of each other.
        </p>
        <p>Since all Model events will bubble up to the collection, interested
          components can simply treat the Columns and Collection instances as
          "event queues" and "subscribe" to the Backgrid events. All Backgrid
          events are effectively notifications of state changes, any objects
          that mixes in Backbone.Events can react to these state changes. You
          can find a list of relevant events in this document.</p>
        <h2>
          <a id="customization" href="#customization" title="Customization" class="section">Customization</a>
        </h2>
        <p>If you are coming from a jQuery background, you'd notice that most of
          the jQuery plugins, no matter how "good" that are, for some measure of
          "goodness", are extremely difficult to customize. Most jQuery plugins
          with a modicum of complexity will give you at least dozens of
          options. The general rule of thumb is, if it doesn't work the way you
          want it, ask the author to throw more options at the problem. Failing
          that, spend an inordinate amount of time to source for another similar
          plugin. If all else failed, you have to roll your own plugin.</p>
        <p>Your laziness has backfired, but that doesn't have to be the case.</p>
        <p>The inherent problem with the jQuery plugin model is that it doesn't
          offer you any help other than giving you a namespace, and the combined
          laziness of plugin authors and users have created an ecosystem full of
          opaque plugins that produce DOM structures that are hard to
          comprehend, hard to style and behaviors impossible to alter, no matter
          how trivial they should be.</p>
        <p>
          Backgrid offers 3 levels of customization:
        </p>
        <ul>
          <li>
            Options to the Grid constructor - Used for required parameters and
            generic behavior provide by Backgrid that you want to switch on or
            off.
          </li>
          <li>
            Styling via CSS - Backgrid's generated DOM structure consists
            solely of your plain old <code>&lt;table&gt;</code> HTML elements,
            just style them as such.
          </li>
          <li>
            Inheritance - Subclass a Backgrid component, give it your
            preferred behavior, give the new class to the Grid constructor and
            voila.
          </li>
        </ul>
        <p>Go on to the Core API reference to find out more:</p>
        <ul>
          <li><a href="/ref/grid.html">Grid</a></li>
          <li><a href="/ref/column.html">Column</a></li>
          <li><a href="/ref/cell.html">Cell</a></li>
          <li><a href="/ref/formatter.html">Formatter</a></li>
          <li><a href="/ref/header.html">Header</a></li>
          <li><a href="/ref/row.html">Row</a></li>
          <li><a href="/ref/body.html">Body</a></li>
          <li><a href="/ref/footer.html">Footer</a></li>
        </ul>
      </div>
    </div>
  {{/content}}
{{/extend}}
