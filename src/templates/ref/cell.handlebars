{{#extend "layout"}}
  {{#content "title"}}Cell{{/content}}
  {{#content "content"}}
    <div class="row">
      <div class="col-md-2">
        <h2>
          <a id="cell" href="#cell" title="Cell" class="section">Cell</a>
        </h2>
        <ul class="nav nav-stacked">
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.Cell">Backgrid.Cell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.DatetimeCell">Backgrid.DatetimeCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.DateCell">Backgrid.DateCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.TimeCell">Backgrid.TimeCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.NumberCell">Backgrid.NumberCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.IntegerCell">Backgrid.IntegerCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.PercentCell">Backgrid.PercentCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.StringCell">Backgrid.StringCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.UriCell">Backgrid.UriCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.EmailCell">Backgrid.EmailCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.BooleanCell">Backgrid.BooleanCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.SelectCell">Backgrid.SelectCell</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.CellEditor">Backgrid.CellEditor</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.InputCellEditor">Backgrid.InputCellEditor</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.SelectCellEditor">Backgrid.SelectCellEditor</a></li>
        </ul>
        <h3>
          <a id="events" href="#events" title="Events" class="section">Events</a>
        </h3>
        <ul class="nav nav-stacked">
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.Cell-method-enterEditMode">backgrid:edit</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.Cell-method-enterEditMode">backgrid:editing</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.InputCellEditor-method-saveOrCancel">backgrid:edited</a></li>
          <li><a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.InputCellEditor-method-saveOrCancel">backgrid:error</a></li>
        </ul>
      </div>
      <div class="col-md-10">
        <h3>
          <a id="demo" href="#demo" title="Demo" class="section">Demo</a>
        </h3>
        <p class="label label-success">Try them</p>
        <div id="cell-demo-grid-1" class="backgrid-container" style="height: auto"></div>
        <div id="cell-demo-grid-2" class="backgrid-container" style="height: auto"></div>
        <aside class="note">
          <h5>Note:</h5>
          <p>Backgrid.js and its author are not associated with Santa and
            santaclaus.com in any way.</p>
        </aside>
        <h3>
          <a id="configuring-cells" href="#configuring-cells" title="Configuring Cells" class="section">Configuring Cells</a>
        </h3>
        <p>While many built-in cells provide reasonable defaults, you may
          choose to configure them to suit your own needs.</p>
        <p>Cell types that you are most likely to configure are the
          NumberCell, DatetimeCell and SelectCell classes. Once
          configured, you may use them as the cell attribute values in
          column definitions.</p>
        <textarea class="code-snippet" data-mode="javascript" data-eval="no">
          var grid = new Backgrid.Grid({

            columns: [{
              name: "id",
              label: "ID",
              editable: false,
              // Dynamically defines a new cell type with new defaults.
              // ID is displayed as an integer without ','s.
              cell: Backgrid.IntegerCell.extend({
                orderSeparator: ''
              })
            }, {
              name: "lastaccessed",
              label: "Last Login Time",
              editable: false,
              cell: Backgrid.DatetimeCell.extend({
                includeMilli: true
              })
            }, {
              name: "gender",
              label: "Gender",
              cell: Backgrid.SelectCell.extend({
                // It's possible to render an option group or use a
                // function to provide option values too.
                optionValues: [["Male", "m"], ["Female", "f"]]
              })
            }],

            collection: col
          });</textarea>
        <p class="label label-info">Pro Tip</p>
        <p>SelectCell treats all option values as strings by default, if
          you need to persist a different type of values into your model,
          you should extend SelectCell to provide your
          own <a href="/ref/formatter.html"
                 title="Formatter">formatter</a>.</p>
        <p>See the <a href="http://cloudflare.github.io/backgrid/api/index.html" title="API Doc">JSDoc</a> for
          the various Cell classes for details on what you can configure
          using this method.</p>
        <h3>
          <a id="custom-cell" href="#custom-cell" title="Custom Cell" class="section">Custom Cell</a>
        </h3>
        <p>If the built-in and extension cell classes are not enough for
          you, you may choose to create your own cell class and supply it
          to a column definition.</p>
        <p>If your custom cell will still use a
          <code>&lt;input type="text" /&gt;</code> like the predefined
          ones for editing, you may choose to
          subclass <a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.Cell">Cell</a>
          or one of the predefined classes and simply define a className
          and a <a href="/ref/formatter.html"
                   title="Formatter">formatter</a>. In fact, most of the core cell
          classes are done this way.</p>
        <textarea class="code-snippet" data-mode="javascript" data-eval="no">
          // This is how StringCell is defined.

          Backgrid.StringCell = Backgrid.Cell.extend({

            // Cell default class names are the lower-cased and dasherized
            // form of the the cell class names by convention.
            className: "string-cell"

            formatter: Backgrid.StringFormatter

          });</textarea>
        <p>If your cell class will render differently in display mode, you
          may simply
          override <a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.Cell-method-render">Cell#render()</a>
          in your subclass.</p>
        <h3>
          <a id="custom-celleditor" href="#custom-celleditor" title="Custom CellEditor" class="section">Custom CellEditor</a>
        </h3>
        <p class="label label-warning">Advanced Usage</p>
        <p>Some cell types, like the
          <a href="/ref/extensions/text-cell.html" title="TextCell">TextCell</a>
          extension, may only make sense if the editor is rendered in a
          modal dialog or a form element in a different part of the
          page. In that case the
          default <a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.InputCellEditor"
                     title="InputCellEditor">InputCellEditor</a>, which renders a
          <code>&lt;input type="text" /&gt;</code>, will not be suitable
          and a new <a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.CellEditor"
                       title="CellEditor">CellEditor</a> must be defined.</p>
        <p>A custom cell editor should subclass <a
          href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.CellEditor">CellEditor</a>
          as it defines a number of required parameters in its initializer
          and clean up operations that are necessary for most cell
          editors. When a cell class enters edit mode, a new editor
          instance is constructed by given it the required parameters, and
          then a Backbone event <code>backgrid:edit</code> is fired from
          the cell instance itself. A custom cell class can act on this
          event to do anything before the cell editor is rendered.</p>
        <p>Once the cell has entered edit mode, a Backbone event
          <code>backgrid:editing</code> is fired. A custom cell class can
          then act on it to do anything after the cell editor has been
          rendered, e.g. placing the focus inside the editor.</p>
        <p>During editing, if an error is encountered (see the <a
          href="/ref/formatter.html">formatter protocol</a> below), a cell
          editor should fire a Backbone event <code>backgrid:error</code>
          so that listeners&mdash;usually a cell instance&mdash;can
          respond appropriately. When editing is done, a cell editor
          should fire a Backbone <code>backgrid:edited</code> event. A cell
          should be listening to this event so it can remove its editor
          and re-render itself in display mode.</p>
        <p class="label label-danger">Truly Advanced Hacking</p>
        <p>At the most basic level, Cells and CellEditors are simply
          <a href="http://backbonejs.org/#View"
             title="Backbone.View">Backbone.View</a> classes that are
          guaranteed to be given a number of parameters when constructed
          by <a href="http://cloudflare.github.io/backgrid/api/index.html#!/api/Backgrid.Row"
                title="Row">Row</a>. You can use any Backbone.View as your Cell
          and CellEditor.</p>
      </div>
    </div>
  {{/content}}
  {{#content "endscripts" mode="append"}}
    <script>
     $(document).ready(function () {

       function nextChristmas() {
         var now = new Date();
         if (now.getMonth() < 11 || (now.getMonth() == 11 && now.getDate() < 24)) {
           return now.getFullYear() + "-12-24T00:00Z";
         }

         if (now.getMonth() == 11 && now.getDate() >= 26) {
           return (now.getFullYear() + 1) + "-12-24T00:00Z";
         }
       }

       var santa1 = new Backbone.Model({
         name: "Santa Clause",
         age: new Date().getFullYear() - 270,
         birthday: "0270-03-01",
         gender: "m",
         alive: true,
         deliveryRate: 50
       });

       var santa2 = new Backbone.Model({
         url: "http://santaclaus.com",
         email: "santa@santaclaus.com",
         nextDeliveryTime: nextChristmas(),
         hisLocalTime: moment().format("YYYY-MM-DDTHH:mm:ss.SSS\\Z"),
         moneyInWallet: 10.7
       });

       var columns = [{
         name: "name",
         cell: "string",
         label: "Name (StringCell)"
       }, {
         name: "age",
         cell: "integer",
         label: "Age (IntegerCell)"
       }, {
         name: "birthday",
         cell: "date",
         label: "Birthday (DateCell)"
       }, {
         name: "gender",
         cell: Backgrid.SelectCell.extend({
           optionValues: [["Male", "m"], ["Female", "f"]]
         }),
         label: "Gender (SelectCell)"
       }, {
         name: "alive",
         cell: "boolean",
         label: "Alive (BooleanCell)"
       }, {
         name: "deliveryRate",
         cell: "percent",
         label: "Percent Delivered"
       }, {
         name: "url",
         cell: "uri",
         label: "URL (UriCell)"
       }, {
         name: "email",
         cell: "email",
         label: "Email (EmailCell)"
       }, {
         name: "nextDeliveryTime",
         cell: "datetime",
         label: "Next Delivery Time (DateTimeCell)"
       }, {
         name: "hisLocalTime", // His local time is your local time, Santa lives at the North Pole.
         cell: "time",
         label: "His Local Time (TimeCell)"
       }, {
         name: "moneyInWallet",
         cell: "number",
         label: "Change in Wallet (NumberCell)"
       }];

       var cellDemoGrid1 = new Backgrid.Grid({
         columns: columns.slice(0, 6),
         collection: new Backbone.Collection([santa1])
       });

       $("#cell-demo-grid-1").append(cellDemoGrid1.render().el);

       var cellDemoGrid2 = new Backgrid.Grid({
         columns: columns.slice(6),
         collection: new Backbone.Collection([santa2])
       });

       $("#cell-demo-grid-2").append(cellDemoGrid2.render().el);
     });
    </script>
  {{/content}}
{{/extend}}
