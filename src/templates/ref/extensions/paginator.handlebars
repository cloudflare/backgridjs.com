{{#extend "layout"}}
  {{#content "title"}}Paginator{{/content}}
  {{#content "content"}}
    <div class="row">
      <div class="col-md-3">
        <h2>
          <a id="paginator" href="#paginator" title="Paginator" class="section">Paginator</a>
        </h2>
        <ul class="nav nav-stacked">
          <li><a href="http://cloudflare.github.io/backgrid-paginator/api/index.html#!/api/Backgrid.Extension.PageHandle">Backgrid.Extension.PageHandle</a></li>
          <li><a href="http://cloudflare.github.io/backgrid-paginator/api/index.html#!/api/Backgrid.Extension.Paginator">Backgrid.Extension.Paginator</a></li>
        </ul>
        <br/>
        <h4>
          <a id="best-used-on" href="#best-used-on" title="Best Used On" class="section">Best Used On</a>
        </h4>
        <ul>
          <li>Desktop</li>
          <li>Mobile</li>
        </ul>
        <a class="btn btn-lg btn-success center-block" href="https://github.com/wyuenho/backgrid-paginator" title="backgrid-paginator">Download</a>
      </div>
      <div class="col-md-9">
        <h3>
          <a id="when-to-use" href="#when-to-use" title="When to Use" class="section">When to Use</a>
        </h3>
        <p>When you have more data than your grid can fit, you can use
          Paginator to break the display of your data into pages.</p>
        <h3>
          <a id="prerequisites" href="#prerequisites" title="Prerequisites" class="section">Prerequisites</a>
        </h3>
        <p>Backgrid.Extension.Paginator needs a Backbone.Collection
          subclass that supports pagination. Luckily, there is already one
          available specially written for this purpose
          - <a href="https://github.com/backbone-paginator/backbone.paginator"
          title="backbone.paginator">Backbone.PageableCollection</a>.</p>
        <p>Backbone.PageableCollection is a strict superset of the vanilla
          Backbone.Collection with additional pagination and sorting
          functionality. If you like, you can use
          Backbone.PageableCollection throughout your application and it
          will work exactly the same as Backbone.Collection.</p>
        <h3>
          <a id="backbone-pageablecollection"
             href="#backbone-pageablecollection"
             title="Backbone.PageableCollection"
             class="section"
             >Backbone.PageableCollection</a>
        </h3>
        <p>Out of the box, Backbone.PageableCollection works with RESTful
          APIs that accept Ruby's will_paginate pagination query
          parameters but you are able to configure the query string
          mapping anyway you like. The following example works with
          <a href="http://developer.github.com/v3/" title="GitHub API
          v3">GitHub's API</a>:</p>
        <textarea class="code-snippet" data-mode="javascript" data-eval="yes">
          // Works exactly like Backbone.Collection.
          var Issues = Backbone.PageableCollection.extend({

            url: "https://api.github.com/search/issues",

            // Initial pagination states
            state: {
              pageSize: 15,
              sortKey: "updated",
              order: 1
            },

            // You can remap the query parameters from `state` keys from
            // the default to those your server supports
            queryParams: {
              totalPages: null,
              totalRecords: null,
              sortKey: "sort",
              q: "state:closed repo:jashkenas/backbone"
            },

            parseState: function (resp, queryParams, state, options) {
              return {totalRecords: resp.total_count};
            },

            parseRecords: function (resp, options) {
              return resp.items;
            }

          });

          var issues = new Issues();</textarea>
        <h3>
          <a id="configuring-backgrid-extension-paginator"
             href="#configuring-backgrid-extension-paginator"
             title="Configuring Backgrid.Extension.Paginator"
             class="section"
             >Configuring Backgrid.Extension.Paginator</a>
        </h3>
        <p>Backgrid.Extension.Paginator supports a number of configuration
          options to adjust to the size of the result set. You can control the
          default window size, how many pages to slide an whether the grid
          should go back to the first page after sorting.</p>
        <textarea class="code-snippet" data-mode="javascript" data-eval="yes">
          var issueGrid = new Backgrid.Grid({

            columns: [{
              name: "id",
              cell: Backgrid.IntegerCell.extend({ orderSeparator: '' }),
              sortable: false,
              editable: false
            }, {
              name: "title",
              cell: "string",
              sortable: false,
              editable: false
            }, {
              name: "body",
              cell: "text", // See the TextCell extension
              sortable: false
            }, {
              name: "comments",
              cell: "integer"
            }],

            collection: issues
          });

          var $paginatorExample = $("#paginator-example-result");
          $paginatorExample.append(issueGrid.render().el);

          var paginator = new Backgrid.Extension.Paginator({

            // If you anticipate a large number of pages, you can adjust
            // the number of page handles to show. The sliding window
            // will automatically show the next set of page handles when
            // you click next at the end of a window.
            windowSize: 20, // Default is 10

            // Used to multiple windowSize to yield a number of pages to slide,
            // in the case the number is 5
            slideScale: 0.25, // Default is 0.5

            // Whether sorting should go back to the first page
            goBackFirstOnSort: false, // Default is true

            collection: issues
          });

          $paginatorExample.append(paginator.render().el);

          issues.fetch({reset: true});</textarea>
        <h3>
          <a id="result" href="#result" title="Result" class="section">Result</a>
        </h3>
        <aside class="note">
          <h3>Note:</h3>
          <p>GitHub's API is <a
            href="http://developer.github.com/v3/search/#rate-limit" title="GitHub
            API Rate Limit">rate limited</a>, if the example doesn't work, you
            may want to try again in a few minutes.</p>
        </aside>
        <div id="paginator-example-result" class="backgrid-container" style="height: auto"></div>
        <p class="label label-warning">Advanced Usage</p>
        <p>You can control how the control and page handles are rendered, you
          can even control how the sliding window algorithm works. Please refer
          to the <a
          href="http://cloudflare.github.io/backgrid-paginator/api/index.html"
          title="backgrid-paginator JSDoc"> JSDoc</a> for details.</p>
      </div>
    </div>
  {{/content}}
{{/extend}}
